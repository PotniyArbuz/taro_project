from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import os
from openai import OpenAI
import redis
from datetime import datetime, timedelta
from dotenv import load_dotenv
import random
import logging
import requests
import uuid
import json
from yookassa import Configuration, Payment
from flask import redirect
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

app = Flask(__name__)
CORS(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_API_KEY = os.getenv("YOOKASSA_API_KEY")
Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_API_KEY)

def send_telegram_message(chat_id, text, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup

    try:
        response = requests.post(TELEGRAM_API_URL, json=payload, timeout=30)
        response.raise_for_status()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram, chat_id: {chat_id}")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        raise

def get_request_count(user_id):
    key = f"user:{user_id}:requests"
    if (redis_client.exists(f"user:{user_id}:day_sub") or redis_client.exists(f"user:{user_id}:week_sub") or redis_client.exists(f"user:{user_id}:month_sub")):
        redis_client.setex(key, int(timedelta(days=1).total_seconds()), 0)
    count = redis_client.get(key)
    if count is None:
        redis_client.setex(key, int(timedelta(days=1).total_seconds()), 0)
        return 0
    return int(count)

def increment_request_count(user_id):
    key = f"user:{user_id}:requests"
    redis_client.incr(key)
    
def get_daily_bonus_count(user_id):
    bonus_keys = redis_client.keys(f"user:{user_id}:daily_bonus:*")
    return len(bonus_keys)
    
def get_active_bonus_count(user_id):
    bonus_keys = redis_client.keys(f"user:{user_id}:bonus:*")
    return len(bonus_keys)

def has_premium_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É"""
    return redis_client.exists(f"user:{user_id}:premium_access")

def has_sovmestimost_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    return redis_client.exists(f"user:{user_id}:sovmestimost_access")

def has_lestnitsa_kariery_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—Ä—å–µ—Ä—ã"""
    return redis_client.exists(f"user:{user_id}:lestnitsa_kariery_access")

def has_probuzhdenie_dushi_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥—É—à–∏"""
    return redis_client.exists(f"user:{user_id}:probuzhdenie_dushi_access")

def has_volna_peremen_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –í–æ–ª–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω"""
    return redis_client.exists(f"user:{user_id}:volna_peremen_access")

def has_sad_talantov_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –°–∞–¥ —Ç–∞–ª–∞–Ω—Ç–æ–≤"""
    return redis_client.exists(f"user:{user_id}:sad_talantov_access")

def has_finance_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã"""
    return redis_client.exists(f"user:{user_id}:finance_access")

def has_daily_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –¥–µ–Ω—å"""
    return redis_client.exists(f"user:{user_id}:daily_access")

def has_month_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –º–µ—Å—è—Ü"""
    return redis_client.exists(f"user:{user_id}:month_access")

def grant_premium_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:premium_access", 604800, 1)

def grant_sovmestimost_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:sovmestimost_access", 604800, 1)
    
def grant_lestnitsa_kariery_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—Ä—å–µ—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:lestnitsa_kariery_access", 604800, 1)
    
def grant_probuzhdenie_dushi_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥—É—à–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:probuzhdenie_dushi_access", 604800, 1)
    
def grant_volna_peremen_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –í–æ–ª–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:volna_peremen_access", 604800, 1)
    
def grant_sad_talantov_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –°–∞–¥ —Ç–∞–ª–∞–Ω—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:sad_talantov_access", 604800, 1)
    
def grant_finance_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:finance_access", 604800, 1)
    
def grant_daily_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –¥–µ–Ω—å –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:daily_access", 604800, 1)
    
def grant_month_access(user_id):
    """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –º–µ—Å—è—Ü –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    redis_client.setex(f"user:{user_id}:month_access", 604800, 1)

def get_gpt4o_response(question, selected_cards):
    cards_list = ", ".join(selected_cards)
    prompt_text = (
        f"–¢—ã —Ç–∞—Ä–æ–ª–æ–≥. –í–æ–ø—Ä–æ—Å: \"{question}\". –í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã: {cards_list}. –°–Ω–∞—á–∞–ª–∞ –¥–∞–π —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞, –Ω—É–º–µ—Ä—É—è –∏—Ö. –ó–∞—Ç–µ–º –¥–∞–π –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏."
    )
    
    if random.random() < 0.65:
        prompt_text += " –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º."
    else:
        prompt_text += " –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt_text}],
            max_tokens=1500,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {str(error)}")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ. üòî")

@app.route('/', methods=['GET'])
def home():
    return "Hello, Taro App is running!"

@app.route('/remaining-requests', methods=['GET'])
def remaining_requests():
    user_id = request.headers.get("X-Telegram-User-Id", "unknown")
    request_count = get_request_count(user_id)
    bonus_count = get_active_bonus_count(user_id)
    total_limit = 3 + bonus_count
    remaining = max(total_limit - request_count, 0)
    if (redis_client.exists(f"user:{user_id}:day_sub") or redis_client.exists(f"user:{user_id}:week_sub") or redis_client.exists(f"user:{user_id}:month_sub")):
        return jsonify({"remaining": "‚àû"})
    return jsonify({"remaining": remaining})

@app.route('/yookassa_callback', methods=['POST'])
def yookassa_callback():
    notification = request.get_json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {notification}")

    if notification['event'] == 'payment.succeeded':
        yookassa_payment_id = notification['object']['id']
        # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å –≤ Redis
        payment_uuid = None
        for key in redis_client.keys("pending_payment:*"):
            data = redis_client.get(key)
            if data:
                data = json.loads(data)
                if data.get("yookassa_payment_id") == yookassa_payment_id:
                    payment_uuid = key.split(":")[-1]
                    break

        if not payment_uuid:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ —Å ID {yookassa_payment_id}")
            return '', 200

        payment_data_raw = redis_client.get(f"pending_payment:{payment_uuid}")
        if not payment_data_raw:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è payment_uuid {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis")
            return '', 200

        payment_data = json.loads(payment_data_raw)
        user_id = payment_data["user_id"]
        chat_id = payment_data["chat_id"]
        payment_type = payment_data.get("payment_type")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞

        # –î–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
        if payment_type == "premium7":
            grant_premium_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É \"–ß—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏?\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–ß—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏?\"."
            web_app_url = f"https://ai-girls.ru/premium7?chat_id={chat_id}"
        elif payment_type == "sovmestimost":
            grant_sovmestimost_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–ù–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–ù–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\"."
            web_app_url = f"https://ai-girls.ru/sovmestimost?chat_id={chat_id}"
        elif payment_type == "lestnitsa_kariery":
            grant_lestnitsa_kariery_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—Ä—å–µ—Ä—ã\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—Ä—å–µ—Ä—ã\"."
            web_app_url = f"https://ai-girls.ru/lestnitsa_kariery?chat_id={chat_id}"
        elif payment_type == "probuzhdenie_dushi":
            grant_probuzhdenie_dushi_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥—É—à–∏\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥—É—à–∏\"."
            web_app_url = f"https://ai-girls.ru/probuzhdenie_dushi?chat_id={chat_id}"
        elif payment_type == "volna_peremen":
            grant_volna_peremen_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–í–æ–ª–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–í–æ–ª–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω\"."
            web_app_url = f"https://ai-girls.ru/volna_peremen?chat_id={chat_id}"
        elif payment_type == "sad_talantov":
            grant_sad_talantov_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–°–∞–¥ —Ç–∞–ª–∞–Ω—Ç–æ–≤\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–°–∞–¥ —Ç–∞–ª–∞–Ω—Ç–æ–≤\"."
            web_app_url = f"https://ai-girls.ru/sad_talantov?chat_id={chat_id}"
        elif payment_type == "finance":
            grant_finance_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–§–∏–Ω–∞–Ω—Å—ã\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª\"."
            web_app_url = f"https://ai-girls.ru/finance?chat_id={chat_id}"
        elif payment_type == "daily":
            grant_daily_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\"."
            web_app_url = f"https://ai-girls.ru/daily?chat_id={chat_id}"
        elif payment_type == "month":
            grant_month_access(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥—É \"–ú–µ—Å—è—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ \"–ú–µ—Å—è—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑\"."
            web_app_url = f"https://ai-girls.ru/month?chat_id={chat_id}"
        elif payment_type == "day_sub":
            redis_client.setex(f"user:{user_id}:day_sub", 86400, 1)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–µ \"–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é (/start) –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–∞–∑–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ!"
        elif payment_type == "week_sub":
            redis_client.setex(f"user:{user_id}:week_sub", 604800, 1)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–µ \"–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é (/start) –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–∞–∑–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ!"
        elif payment_type == "month_sub":
            redis_client.setex(f"user:{user_id}:month_sub", 2678400, 1)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–µ \"–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü\"")
            message = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é (/start) –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–∞–∑–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ!"
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payment_type}")
            return '', 200

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        if (payment_type not in ["day_sub", "week_sub", "month_sub"]):
            reply_markup = {
                "inline_keyboard": [
                    [
                        {
                            "text": "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥üîÆ",
                            "web_app": {"url": web_app_url}
                        }
                    ]
                ]
            }
            send_telegram_message(
                chat_id,
                message,
                reply_markup=reply_markup
            )
        else:
            send_telegram_message(
                chat_id,
                message,
            )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Redis
        redis_client.delete(f"pending_payment:{payment_uuid}")

    elif notification['event'] == 'payment.canceled':
        payment_uuid = notification['object']['metadata']['payment_uuid']
        payment_data_raw = redis_client.get(f"pending_payment:{payment_uuid}")
        if not payment_data_raw:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è payment_uuid {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis, –≤–æ–∑–º–æ–∂–Ω–æ, TTL –∏—Å—Ç—ë–∫")
            return '', 200

        payment_data = json.loads(payment_data_raw)
        chat_id = payment_data["chat_id"]
        send_telegram_message(chat_id, "–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòî")
        redis_client.delete(f"pending_payment:{payment_uuid}")

    return '', 200

@app.route('/yandex-gpt', methods=['POST'])
def yandex_gpt():
    data = request.get_json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    question = data.get("question")
    cards = data.get("cards")
    user_id = request.headers.get("X-Telegram-User-Id", data.get("user_id", "unknown"))
    chat_id = data.get("chat_id")
    source = data.get("source")
    logger.info(f"User ID: {user_id}, Chat ID: {chat_id if chat_id is not None else 'None'}, Source: {source}")

    if not question or not cards or not isinstance(cards, list):
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    if source == "premium7":
        if not has_premium_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "sovmestimost":
        if not has_sovmestimost_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "lestnitsa_kariery":
        if not has_lestnitsa_kariery_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—Ä—å–µ—Ä—ã")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "probuzhdenie_dushi":
        if not has_probuzhdenie_dushi_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –¥—É—à–∏")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "volna_peremen":
        if not has_volna_peremen_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –í–æ–ª–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "sad_talantov":
        if not has_sad_talantov_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –°–∞–¥ —Ç–∞–ª–∞–Ω—Ç–æ–≤")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "finance":
        if not has_finance_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403
    elif source == "daily":
        if not has_daily_access(user_id) and get_daily_bonus_count(user_id) == 0:
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –¥–µ–Ω—å")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 49 —Ä—É–±–ª–µ–π"}), 403
    elif source == "month":
        if not has_month_access(user_id):
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É –Ω–∞ –º–µ—Å—è—Ü")
            return jsonify({"error": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 99 —Ä—É–±–ª–µ–π"}), 403

    request_count = get_request_count(user_id)
    bonus_count = get_active_bonus_count(user_id)
    total_limit = 3 + bonus_count
    if source not in ["premium7", "sovmestimost", "lestnitsa_kariery", "probuzhdenie_dushi", "volna_peremen", "sad_talantov",  "finance", "daily", "month"] and request_count >= total_limit and user_id not in ["1644602227", "5306804212"]:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ {total_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è user_id: {user_id}")
        return jsonify({"error": f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –≤ –±–æ—Ç–µ, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!"}), 429

    try:
        if source == "premium7":
            redis_client.delete(f"user:{user_id}:premium_access")
        elif source == "sovmestimost":
            redis_client.delete(f"user:{user_id}:sovmestimost_access")
        elif source == "lestnitsa_kariery":
            redis_client.delete(f"user:{user_id}:lestnitsa_kariery_access")
        elif source == "probuzhdenie_dushi":
            redis_client.delete(f"user:{user_id}:probuzhdenie_dushi_access")
        elif source == "volna_peremen":
            redis_client.delete(f"user:{user_id}:volna_peremen_access")
        elif source == "sad_talantov":
            redis_client.delete(f"user:{user_id}:sad_talantov_access")
        elif source == "finance":
            redis_client.delete(f"user:{user_id}:finance_access")
        elif source == "daily":
            bonus_keys = redis_client.keys(f"user:{user_id}:daily_bonus:*")
            if bonus_keys:
                redis_client.delete(bonus_keys[0])
            else:
                redis_client.delete(f"user:{user_id}:daily_access")
        elif source == "month":
            redis_client.delete(f"user:{user_id}:month_access")
        elif source not in ["day_sub", "week_sub", "month_sub"]:
            increment_request_count(user_id)

        gpt_response = get_gpt4o_response(question, cards)
        gpt_response = gpt_response.replace('#', '')
        gpt_response = gpt_response.replace('*', '')

        if source in ["premium7", "sovmestimost", "lestnitsa_kariery", "probuzhdenie_dushi", "volna_peremen", "sad_talantov", "finance", "daily", "month"] and chat_id:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, chat_id: {chat_id}")
                chat_id = int(chat_id)
                if len(gpt_response) > 4000:
                    half_length = len(gpt_response) // 2
                    send_telegram_message(chat_id=int(chat_id), text=gpt_response[:half_length])
                    send_telegram_message(chat_id=int(chat_id), text=gpt_response[half_length:])
                else:
                    send_telegram_message(chat_id=int(chat_id), text=gpt_response)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram, chat_id: {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

        return jsonify({"response": gpt_response})
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(error)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(error)}"}), 500

@app.route('/threecards', methods=['GET'])
def threecards():
    chat_id = request.args.get('chat_id')
    return render_template('threecards.html', chat_id=chat_id)

@app.route('/yesno', methods=['GET'])
def yesno():
    chat_id = request.args.get('chat_id')
    return render_template('yesno.html', chat_id=chat_id)

@app.route('/premium7', methods=['GET'])
def premium7():
    chat_id = request.args.get('chat_id')
    return render_template('premium7.html', chat_id=chat_id)

@app.route('/sovmestimost', methods=['GET'])
def sovmestimost():
    chat_id = request.args.get('chat_id')
    return render_template('sovmestimost.html', chat_id=chat_id)

@app.route('/lestnitsa_kariery', methods=['GET'])
def lestnitsa_kariery():
    chat_id = request.args.get('chat_id')
    return render_template('lestnitsa_kariery.html', chat_id=chat_id)

@app.route('/probuzhdenie_dushi', methods=['GET'])
def probuzhdenie_dushi():
    chat_id = request.args.get('chat_id')
    return render_template('probuzhdenie_dushi.html', chat_id=chat_id)

@app.route('/volna_peremen', methods=['GET'])
def volna_peremen():
    chat_id = request.args.get('chat_id')
    return render_template('volna_peremen.html', chat_id=chat_id)

@app.route('/sad_talantov', methods=['GET'])
def sad_talantov():
    chat_id = request.args.get('chat_id')
    return render_template('sad_talantov.html', chat_id=chat_id)

@app.route('/finance', methods=['GET'])
def finance():
    chat_id = request.args.get('chat_id')
    return render_template('finance.html', chat_id=chat_id)

@app.route('/daily', methods=['GET'])
def daily():
    chat_id = request.args.get('chat_id')
    return render_template('daily.html', chat_id=chat_id)

@app.route('/month', methods=['GET'])
def month():
    chat_id = request.args.get('chat_id')
    return render_template('month.html', chat_id=chat_id)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000, debug=True)